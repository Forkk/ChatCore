// ex: set ft=lhaskell:

\begin{code}

module ChatCore.Protocol
    ( RemoteClient
    , RemoteClientMsg
    , RemoteClientHandle
    ) where

import Control.Applicative
import Control.Concurrent.Actor
import Control.Monad
import Control.Monad.Base
import Control.Monad.Trans.Control
import Control.Monad.Trans.Reader
import Control.Monad.Trans.Resource
import Control.Monad.IO.Class
import Data.Conduit
import Data.Typeable
import {-# SOURCE #-} ChatCore.Events
import {-# SOURCE #-} ChatCore.UserController

\end{code}

This is an `hs-boot` file for the `Protocol` module. Unfortunately, this is
necessary due to some stupid cyclical imports between the protocol module and
the `Protocol` module.

\begin{code}

newtype RemoteClient a =
    RC { unRC :: (ReaderT (ActorHandle UserCtlActorMsg) (ActorM RemoteClientMsg) a) }

instance Monad RemoteClient
instance MonadIO RemoteClient
instance MonadThrow RemoteClient
instance Applicative RemoteClient
instance Functor RemoteClient

data RemoteClientMsg = RCCoreEventMsg CoreEvent
instance ActorMessage RemoteClientMsg
type RemoteClientHandle = ActorHandle RemoteClientMsg

\end{code}

